// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGMG.Data;

#nullable disable

namespace SGMG.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250929043524_MigracionForanea")]
    partial class MigracionForanea
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.15");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SGMG.Models.Cita", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Consultorio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoCita")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("HoraCita")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdMedico")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdTriage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicoIdMedico")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PacienteIdPaciente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TriageIdTriage")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdCita");

                    b.HasIndex("MedicoIdMedico");

                    b.HasIndex("PacienteIdPaciente");

                    b.HasIndex("TriageIdTriage");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("SGMG.Models.DisponibilidadMedico", b =>
                {
                    b.Property<int>("IdDisponibilidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdMedico")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicoIdMedico")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdDisponibilidad");

                    b.HasIndex("MedicoIdMedico");

                    b.ToTable("DisponibilidadesMedicos");
                });

            modelBuilder.Entity("SGMG.Models.DomicilioPaciente", b =>
                {
                    b.Property<int>("IdDomicilio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Distrito")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PacienteIdPaciente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdDomicilio");

                    b.HasIndex("PacienteIdPaciente");

                    b.ToTable("DomiciliosPacientes");
                });

            modelBuilder.Entity("SGMG.Models.Enfermeria", b =>
                {
                    b.Property<int>("IdEnfermeria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdPersonal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NivelProfesional")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroColegiaturaEnfermeria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonalIdPersonal")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdEnfermeria");

                    b.HasIndex("PersonalIdPersonal");

                    b.ToTable("Enfermerias");
                });

            modelBuilder.Entity("SGMG.Models.HistoriaClinica", b =>
                {
                    b.Property<int>("IdHistoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoHistoria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PacienteIdPaciente")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TipoSangre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoSeguro")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdHistoria");

                    b.HasIndex("PacienteIdPaciente");

                    b.ToTable("HistoriasClinicas");
                });

            modelBuilder.Entity("SGMG.Models.Medico", b =>
                {
                    b.Property<int>("IdMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaServicio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CargoMedico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsultorioAsignado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoLaboral")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroColegiatura")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroDni")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoMedico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdMedico");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("SGMG.Models.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroDocumento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoDocumento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdPaciente");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("SGMG.Models.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CitaIdCita")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoServicio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DescripcionServicio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoPago")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdCita")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Igv")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("IdPago");

                    b.HasIndex("CitaIdCita");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("SGMG.Models.PersonalTecnico", b =>
                {
                    b.Property<int>("IdPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaServicio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoLaboral")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroDni")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Turno")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdPersonal");

                    b.ToTable("PersonalTecnicos");
                });

            modelBuilder.Entity("SGMG.Models.Triaje", b =>
                {
                    b.Property<int>("IdTriage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClasificacionImc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EstadoTriage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaTriage")
                        .HasColumnType("TEXT");

                    b.Property<int>("FrecuenciaCardiaca")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FrecuenciaRespiratoria")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("HoraTriage")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Imc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteIdPaciente")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PerimetroAbdominal")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Peso")
                        .HasColumnType("TEXT");

                    b.Property<int>("PresionArterial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RiesgoEnfermedad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Saturacion")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SuperficieCorporal")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Talla")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Temperatura")
                        .HasColumnType("TEXT");

                    b.HasKey("IdTriage");

                    b.HasIndex("PacienteIdPaciente");

                    b.ToTable("Triages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SGMG.Models.Cita", b =>
                {
                    b.HasOne("SGMG.Models.Medico", "Medico")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoIdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGMG.Models.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteIdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGMG.Models.Triaje", "Triage")
                        .WithMany()
                        .HasForeignKey("TriageIdTriage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Triage");
                });

            modelBuilder.Entity("SGMG.Models.DisponibilidadMedico", b =>
                {
                    b.HasOne("SGMG.Models.Medico", "Medico")
                        .WithMany("Disponibilidades")
                        .HasForeignKey("MedicoIdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("SGMG.Models.DomicilioPaciente", b =>
                {
                    b.HasOne("SGMG.Models.Paciente", "Paciente")
                        .WithMany("Domicilios")
                        .HasForeignKey("PacienteIdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("SGMG.Models.Enfermeria", b =>
                {
                    b.HasOne("SGMG.Models.PersonalTecnico", "Personal")
                        .WithMany()
                        .HasForeignKey("PersonalIdPersonal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personal");
                });

            modelBuilder.Entity("SGMG.Models.HistoriaClinica", b =>
                {
                    b.HasOne("SGMG.Models.Paciente", "Paciente")
                        .WithMany("HistoriasClinicas")
                        .HasForeignKey("PacienteIdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("SGMG.Models.Pago", b =>
                {
                    b.HasOne("SGMG.Models.Cita", "Cita")
                        .WithMany("Pagos")
                        .HasForeignKey("CitaIdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("SGMG.Models.Triaje", b =>
                {
                    b.HasOne("SGMG.Models.Paciente", "Paciente")
                        .WithMany("Triages")
                        .HasForeignKey("PacienteIdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("SGMG.Models.Cita", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("SGMG.Models.Medico", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Disponibilidades");
                });

            modelBuilder.Entity("SGMG.Models.Paciente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Domicilios");

                    b.Navigation("HistoriasClinicas");

                    b.Navigation("Triages");
                });
#pragma warning restore 612, 618
        }
    }
}
